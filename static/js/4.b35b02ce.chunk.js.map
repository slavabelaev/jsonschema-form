{"version":3,"sources":["site/components/widget-schema-form/docs-field-template/docs-field-template.tsx","site/utils/schema-to-markdown.ts","site/components/widget-schema-form/docs-object-field-template/docs-object-field-template.tsx","site/components/widget-schema-form/docs-reorder/docs-reorder.tsx","site/components/widget-schema-form/docs-array-field-template/docs-array-field-template.tsx","site/components/widget-schema-form/widget-schema-form.tsx"],"names":["DocsFieldTemplate","props","children","stringify","item","JSON","schemaToMarkdown","schema","name","required","type","title","description","headingMd","descriptionMd","rows","Object","entries","enum","map","join","default","examples","$comment","split","value","undefined","String","toCode","cn","createCn","DocsObjectFieldTemplate","properties","useState","selectedIndex","setSelectedIndex","property","content","includes","propertySchema","isObject","hasProperties","length","group","index","className","selected","onClick","schemaMarkdown","schemaDoc","fromMarkdown","list","aside","DocsReorder","disabledDown","disabledUp","onClickUp","onClickDown","classNames","disabled","size","DocsArrayFieldTemplate","canAdd","onAddClick","items","hasItems","addButton","removeButton","hasRemove","onDropIndexClick","reorder","hasMoveDown","hasMoveUp","onReorderClick","key","WidgetSchemaForm","widgetName","setSchema","widgetSchema","definitions","widgets","getWidgetSchema","useEffect","$RefParser","dereference","schemaOfUiSchema","then","FieldTemplate","ObjectFieldTemplate","ArrayFieldTemplate"],"mappings":"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","file":"static/js/4.b35b02ce.chunk.js","sourcesContent":["import {FieldTemplateProps} from \"@rjsf/core\";\n\nexport function DocsFieldTemplate(props: FieldTemplateProps) {\n    return props.children;\n}\n","import {JSONSchema7} from \"json-schema\";\n\nconst toCode = (value: any) => '```' + String(value) + '```';\nconst stringify = (item: any) => JSON.stringify(item);\n\nexport type SchemaToMarkdownType = {\n    schema: JSONSchema7,\n    name?: string;\n    required?: boolean;\n}\n\nexport function schemaToMarkdown({ schema, name, required = false }: SchemaToMarkdownType) {\n    const { type, title = name, description } = schema || {};\n    const headingMd = title ? `### ${title}` : '';\n    const descriptionMd = description ? `${description}` : '';\n    const rows = Object.entries({\n        'Обязательное': required,\n        'Тип': type,\n        'Доступные значения': schema?.enum?.map?.(stringify).join(', '),\n        'По умолчанию': stringify(schema?.default),\n        'Примеры': (schema?.examples as [])?.map?.(stringify).join(', '),\n        'ReactType': schema?.$comment?.split('|').join(','),\n    }).map(\n        ([name, value]) => (value !== undefined) ? `|${name}|${toCode(value)}|\\n` : ''\n    ).join('');\n\n    return `\n${headingMd}\n${descriptionMd}\n|   |   |\n| - | - |\n${rows}\n`\n}\n","import React, {useState} from \"react\";\nimport {createCn} from \"bem-react-classname\";\nimport {ObjectFieldTemplateProps} from \"@rjsf/core\";\nimport {fromMarkdown} from \"../../../../package/utils/from-markdown\";\nimport {schemaToMarkdown} from \"../../../utils/schema-to-markdown\";\nimport './docs-object-field-template.scss';\n\nconst cn = createCn('docs-object-field-template');\n\nexport function DocsObjectFieldTemplate(props: ObjectFieldTemplateProps) {\n    const { properties, schema } = props;\n    const [selectedIndex, setSelectedIndex] = useState(0);\n    const property = properties?.[selectedIndex];\n    const { name, content } = property || {};\n    const required = schema.required?.includes(name);\n    const propertySchema = content?.props?.schema;\n    const isObject = propertySchema?.type === 'object' || propertySchema?.properties;\n    const hasProperties = properties.length > 0;\n\n    const group = hasProperties\n        ? properties.map((item, index) => (\n            <li key={index}\n                className={cn('list-item', {\n                    selected: selectedIndex === index\n                })}\n                onClick={() => setSelectedIndex(index)}\n            >\n                {item.name}\n            </li>\n        ))\n        : null;\n\n    const schemaMarkdown = schemaToMarkdown({\n        schema: propertySchema,\n        required,\n        name\n    });\n    const schemaDoc = (\n        <div className={cn('doc')}>\n            {fromMarkdown(schemaMarkdown)}\n        </div>\n    );\n\n    const list = (\n        <ul className={cn('list')}>\n            {group}\n        </ul>\n    );\n\n    const aside = (\n        <aside className={cn('aside')}>\n            {isObject ? property?.content : schemaDoc}\n        </aside>\n    );\n\n    return hasProperties ? (\n        <div className={cn()}>\n            {list}\n            {aside}\n        </div>\n    ) : null;\n}\n","import React from \"react\";\nimport {createCn} from 'bem-react-classname';\nimport ArrowDownIcon from \"arui-feather/icon/ui/arrow-down\";\nimport ArrowUpIcon from \"arui-feather/icon/ui/arrow-up\";\nimport './docs-reorder.scss';\n\nexport type ReorderProps = {\n    className?: HTMLDivElement['className'];\n    onClickDown?: (event: any) => void;\n    onClickUp?: (event: any) => void;\n    disabledUp?: boolean;\n    disabledDown?: boolean;\n}\n\nconst cn = createCn('docs-reorder');\n\nexport function DocsReorder({\n    className,\n    disabledDown = false,\n    disabledUp = false,\n    onClickUp,\n    onClickDown\n}: ReorderProps) {\n    const classNames = [cn(), className].join(' ');\n\n    return (\n        <div className={classNames}>\n            <button\n                type=\"button\"\n                className={cn('button')}\n                disabled={disabledUp}\n                onClick={onClickUp}\n            >\n                <ArrowUpIcon className={cn('icon')} size=\"s\" />\n            </button>\n            <button\n                type=\"button\"\n                className={cn('button')}\n                disabled={disabledDown}\n                onClick={onClickDown}\n            >\n                <ArrowDownIcon className={cn('icon')} size=\"s\" />\n            </button>\n        </div>\n    )\n}\n","import React from \"react\";\nimport {createCn} from \"bem-react-classname\";\nimport {ArrayFieldTemplateProps} from \"@rjsf/core\";\nimport CloseIcon from 'arui-feather/icon/ui/close';\nimport {DocsReorder} from \"../docs-reorder\";\nimport './docs-array-field-template.scss';\n\nconst cn = createCn('docs-array-field-template');\n\nexport function DocsArrayFieldTemplate(props: ArrayFieldTemplateProps) {\n    const {\n        className,\n        canAdd,\n        onAddClick,\n        items\n    } = props;\n    const hasItems = items.length > 0;\n\n    const addButton = canAdd && (\n        <button\n            className={cn('item-add-button')}\n            onClick={onAddClick}\n        >\n            + Добавить\n        </button>\n    );\n\n    const group = hasItems ? (\n        <ul className={cn('item-group')}>\n            {items.map(item => {\n                const { index } = item;\n                if (!item.children) return null;\n\n                const removeButton = item.hasRemove && (\n                    <button\n                        className={cn('item-remove-button')}\n                        onClick={item.onDropIndexClick(index)}\n                    >\n                        <CloseIcon size='s' />\n                    </button>\n                );\n\n                const reorder = (item.hasMoveDown || item.hasMoveUp) && (\n                    <DocsReorder\n                        className={cn('item-reorder')}\n                        onClickUp={item.onReorderClick(index, index - 1)}\n                        onClickDown={item.onReorderClick(index, index + 1)}\n                        disabledUp={!item.hasMoveUp}\n                        disabledDown={!item.hasMoveDown}\n                    />\n                );\n\n                const group = (\n                    <div className={cn('item-group')}>\n                        {item.children}\n                    </div>\n                );\n\n                return (\n                    <li\n                        key={item.key}\n                        className={[cn('item'), item.className].join(' ')}\n                    >\n                        {reorder}\n                        {group}\n                        {removeButton}\n                    </li>\n                )\n            })}\n        </ul>\n    ) : null;\n\n    const classNames = [cn(), className].join(' ');\n    return hasItems || canAdd ? (\n        <fieldset className={classNames}>\n            {group}\n            {addButton}\n        </fieldset>\n    ) : null;\n}\n","import React, {useEffect, useState} from 'react';\nimport {createCn} from \"bem-react-classname\";\nimport Form, {FormProps} from \"@rjsf/core\";\nimport $RefParser from \"@apidevtools/json-schema-ref-parser\";\nimport {JSONSchema6, JSONSchema7} from \"json-schema\";\nimport {DocsFieldTemplate} from \"./docs-field-template\";\nimport {DocsObjectFieldTemplate} from \"./docs-object-field-template\";\nimport schemaOfUiSchema from \"../../../package/schemas/ui-schema.schema.json\";\nimport {DocsArrayFieldTemplate} from \"./docs-array-field-template\";\nimport './ui-schema-form.scss';\n\nconst cn = createCn('ui-schema-form');\n\nexport type WidgetSchemaFormProps = {\n    widgetName: string;\n};\n\nconst getWidgetSchema = (schema: JSONSchema7, widgetName: string) => {\n    return (schema as any)?.definitions?.widgets?.definitions?.[widgetName];\n}\n\nexport default function WidgetSchemaForm({ widgetName }: WidgetSchemaFormProps) {\n    const [schema, setSchema] = useState<FormProps<any>['schema']>();\n    const widgetSchema = (schema && widgetName) && getWidgetSchema(schema, widgetName);\n\n    useEffect(() => {\n        $RefParser.dereference(schemaOfUiSchema as JSONSchema6)\n            .then(schema => setSchema(schema as JSONSchema7));\n    }, []);\n\n    return widgetSchema ? (\n        <Form\n            className={cn()}\n            FieldTemplate={DocsFieldTemplate}\n            ObjectFieldTemplate={DocsObjectFieldTemplate}\n            ArrayFieldTemplate={DocsArrayFieldTemplate}\n            schema={widgetSchema}\n        ><></></Form>\n    ) : null;\n}\n"],"sourceRoot":""}